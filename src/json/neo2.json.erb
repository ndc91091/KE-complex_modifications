{
    "title": "Neo2",
    "rules": [
        <%
        # halt defaults to 'false'
        def set_mod_4(value, halt = false)
            if (halt)
                { "set_variable" => { "name" => "neo2_mod_4", "value" => value }, "halt" => true }
            else
                { "set_variable" => { "name" => "neo2_mod_4", "value" => value } }
            end
        end
        $if_mod_4_on         = { "type" => "variable_unless", "name" => "neo2_mod_4", "value" => 0 }
        $if_mod_4_locked     = { "type" => "variable_if",     "name" => "neo2_mod_4", "value" => 2 }
        $if_mod_4_not_locked = { "type" => "variable_unless", "name" => "neo2_mod_4", "value" => 2 }
        def neo2_modifiers(mod_3_key, mod_4_key)
            JSON.generate(
                each_key(
                    source_keys_list: [
                        mod_3_key,
                        "caps_lock",
                        "right_option",
                    ],
                    dest_keys_list: [
                        "right_option",
                        "left_option",
                        "right_command",
                    ],
                    from_optional_modifiers: ["any"]
                ) + [mod_4_key].map { |from_key|
                    {
                        "type" => "basic",
                        "from" => { "simultaneous" => [ { "key_code" => from_key }, { "key_code" => "right_command" } ] },
                        "to" => [ set_mod_4(2, true) ],
                        "conditions" => [ $if_mod_4_not_locked ]
                    }
                } + [mod_4_key].map { |from_key|
                    {
                        "type" => "basic",
                        "from" => { "simultaneous" => [ { "key_code" => from_key }, { "key_code" => "right_command" } ] },
                        "to" => [ set_mod_4(0) ],
                        "conditions" => [ $if_mod_4_locked ]
                    }
                } + [mod_4_key, "right_command"].map { |from_key|
                    {
                        "type" => "basic",
                        "from" => _from(from_key, [], ["any"]),
                        "to" => [set_mod_4(1)],
                        "to_after_key_up" => [set_mod_4(0)],
                        "conditions" => [$if_mod_4_not_locked]
                    }
                }
            )
        end %>
        {
            "description": "Neo2 mod 3 and 4 keys (Apple keyboard). Toggle mod4 by pressing both mod4 keys simultaneously.",
            "manipulators": <%= neo2_modifiers("backslash", "grave_accent_and_tilde") %>
        },
        {
            "description": "Neo2 mod 3 and 4 keys (Windows keyboard). Toggle mod4 by pressing both mod4 keys simultaneously.",
            "manipulators": <%= neo2_modifiers("non_us_pound", "non_us_backslash") %>
        },
        {
            "description": "Neo2 layer 4",
            "manipulators":
            <% l4_mappings = {
                # navigation keys
                "d" => "down_arrow",
                "e" => "up_arrow",
                "s" => "left_arrow",
                "f" => "right_arrow",
                "q" => "page_up",
                "t" => "page_down",

                # escape
                "z" => "escape",

                # deletion
                "w" => "delete_or_backspace",
                "r" => "delete_forward",

                # num pad
                "m" => "keypad_1",
                "comma" => "keypad_2",
                "period" => "keypad_3",
                "j" => "keypad_4",
                "k" => "keypad_5",
                "l" => "keypad_6",
                "u" => "keypad_7",
                "i" => "keypad_8",
                "o" => "keypad_9",
                "spacebar" => "keypad_0",
                "9" => "keypad_slash",
                "0" => "keypad_asterisk",
                "hyphen" => "keypad_hyphen",
                "p" => "keypad_plus",
                "v" => "return_or_enter",
                "quote" => "period",
                "semicolon" => "comma",

                # tab
                "x" => "tab",
                "8" => "tab",
            }
            l4_dead_key_mappings = [
                "non_us_backslash",
                "1", "2", "3", "4", "5", "6", "7",
                "hyphen", "equal_sign",
                "open_bracket", "close_bracket",
                "y", "h"
            ] %>
            <%= JSON.generate(
                each_key(
                    source_keys_list: l4_mappings.keys,
                    dest_keys_list: l4_mappings.values,
                    conditions: [$if_mod_4_on],
                    from_optional_modifiers: ["shift", "caps_lock", "command"]
                ) + each_key(
                    source_keys_list: ["n", "slash"],
                    dest_keys_list: ["semicolon", "slash"],
                    conditions: [$if_mod_4_on],
                    from_optional_modifiers: ["shift", "caps_lock", "command"],
                    to_modifiers: ["left_option"]
                ) + each_key(
                    source_keys_list: ["b", "c", "a", "g"],
                    dest_keys_list: ["b", "w", "left_arrow", "right_arrow"],
                    conditions: [$if_mod_4_on],
                    from_optional_modifiers: ["shift", "caps_lock"],
                    to_modifiers: ["left_command"]
                ) + each_key(
                    source_keys_list: l4_dead_key_mappings,
                    dest_keys_list: l4_dead_key_mappings,
                    conditions: [$if_mod_4_on],
                    to_modifiers: ["left_shift"],
                    to_pre_events: [["z", ["left_option", "left_shift"]]]
                )
            ) %>
        },
        {
            "description": "Neo2 layer 6",
            "manipulators":
            <% l6_dead_key_mappings = [
                "non_us_backslash",
                "1", "2", "3", "4", "5", "6", "7", "8", "9", "0",
                "hyphen", "equal_sign",
                "q", "w", "e", "r", "t", "y", "u", "i", "o", "p",
                "open_bracket", "close_bracket",
                "a", "s", "d", "f", "g", "h", "j", "k", "l",
                "semicolon", "quote",
                "z", "x", "c", "v", "b", "n", "m",
                "comma", "period", "slash"
            ] %>
            <%= JSON.generate(
                each_key(
                    source_keys_list: l6_dead_key_mappings,
                    dest_keys_list: l6_dead_key_mappings,
                    conditions: [$if_mod_4_on],
                    from_mandatory_modifiers: ["option"],
                    to_modifiers: ["left_shift", "left_option"],
                    to_pre_events: [["z", ["left_option", "left_shift"]]]
                )
            ) %>
        },
        {
            "description": "Toggle caps_lock by pressing left_shift + right_shift at the same time",
            "manipulators": [
                {
                    "type": "basic",
                    "from": <%= from("left_shift", ["right_shift"], ["caps_lock"]) %>,
                    "to": <%= to([["caps_lock"]]) %>,
                    "to_if_alone": <%= to([["left_shift"]]) %>
                },
                {
                    "type": "basic",
                    "from": <%= from("right_shift", ["left_shift"], ["caps_lock"]) %>,
                    "to": <%= to([["caps_lock"]]) %>,
                    "to_if_alone": <%= to([["right_shift"]]) %>
                }
            ]
        },
        {
            "description": "Tab acts as Ctrl if pressed with another key",
            "manipulators": [
                {
                    "type": "basic",
                    "from": <%= from("tab", [], ["shift", "option", "command"]) %>,
                    "to": <%= to([["left_control"]]) %>,
                    "to_if_alone": <%= to([["tab"]]) %>
                }
            ]
        },
        {
          "description": "Prevent problematic keys (?, /, #, =, and ')') from being treated as option key shortcut",
          "manipulators": <%= JSON.generate(
              each_key(
                  source_keys_list: ["h", "s", "z", "o", "k"],
                  dest_keys_list: ["h", "s", "z", "o", "k"],
                  from_mandatory_modifiers: ["option"],
                  to_modifiers: [],
                  to_pre_events: [["a", ["left_option", "left_shift"]]]
              )
          ) %>
        },
        {
          "description": "Prevent all layer 3 keys from being treated as option key shortcut",
          "manipulators": <%= JSON.generate(
              each_key(
                  source_keys_list: ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "open_bracket", "semicolon", "quote", "comma", "period", "slash"],
                  dest_keys_list: ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "open_bracket", "semicolon", "quote", "comma", "period", "slash"],
                  from_mandatory_modifiers: ["option"],
                  to_modifiers: [],
                  to_pre_events: [["a", ["left_option", "left_shift"]]]
              )
          ) %>
        }
    ]
}
